/* tslint:disable */
/* eslint-disable */
/**
 * ErcWorld Marketplace
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Collection } from '../models';
import { Order } from '../models';
import { Token } from '../models';
import { TokenBid } from '../models';
import { TokenTransaction } from '../models';
/**
 * CollectionsApi - axios parameter creator
 * @export
 */
export const CollectionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} contractAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsContractAddressGet: async (contractAddress: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractAddress' is not null or undefined
            if (contractAddress === null || contractAddress === undefined) {
                throw new RequiredError('contractAddress','Required parameter contractAddress was null or undefined when calling collectionsContractAddressGet.');
            }
            const localVarPath = `/collections/{contractAddress}`
                .replace(`{${"contractAddress"}}`, encodeURIComponent(String(contractAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} contractAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsContractAddressTokensGet: async (contractAddress: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractAddress' is not null or undefined
            if (contractAddress === null || contractAddress === undefined) {
                throw new RequiredError('contractAddress','Required parameter contractAddress was null or undefined when calling collectionsContractAddressTokensGet.');
            }
            const localVarPath = `/collections/{contractAddress}/tokens`
                .replace(`{${"contractAddress"}}`, encodeURIComponent(String(contractAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} contractAddress 
         * @param {string} tokenId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsContractAddressTokensTokenIdBidsGet: async (contractAddress: string, tokenId: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractAddress' is not null or undefined
            if (contractAddress === null || contractAddress === undefined) {
                throw new RequiredError('contractAddress','Required parameter contractAddress was null or undefined when calling collectionsContractAddressTokensTokenIdBidsGet.');
            }
            // verify required parameter 'tokenId' is not null or undefined
            if (tokenId === null || tokenId === undefined) {
                throw new RequiredError('tokenId','Required parameter tokenId was null or undefined when calling collectionsContractAddressTokensTokenIdBidsGet.');
            }
            const localVarPath = `/collections/{contractAddress}/tokens/{tokenId}/bids`
                .replace(`{${"contractAddress"}}`, encodeURIComponent(String(contractAddress)))
                .replace(`{${"tokenId"}}`, encodeURIComponent(String(tokenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} contractAddress 
         * @param {string} tokenId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsContractAddressTokensTokenIdGet: async (contractAddress: string, tokenId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractAddress' is not null or undefined
            if (contractAddress === null || contractAddress === undefined) {
                throw new RequiredError('contractAddress','Required parameter contractAddress was null or undefined when calling collectionsContractAddressTokensTokenIdGet.');
            }
            // verify required parameter 'tokenId' is not null or undefined
            if (tokenId === null || tokenId === undefined) {
                throw new RequiredError('tokenId','Required parameter tokenId was null or undefined when calling collectionsContractAddressTokensTokenIdGet.');
            }
            const localVarPath = `/collections/{contractAddress}/tokens/{tokenId}`
                .replace(`{${"contractAddress"}}`, encodeURIComponent(String(contractAddress)))
                .replace(`{${"tokenId"}}`, encodeURIComponent(String(tokenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} contractAddress 
         * @param {string} tokenId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsContractAddressTokensTokenIdTransactionsGet: async (contractAddress: string, tokenId: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractAddress' is not null or undefined
            if (contractAddress === null || contractAddress === undefined) {
                throw new RequiredError('contractAddress','Required parameter contractAddress was null or undefined when calling collectionsContractAddressTokensTokenIdTransactionsGet.');
            }
            // verify required parameter 'tokenId' is not null or undefined
            if (tokenId === null || tokenId === undefined) {
                throw new RequiredError('tokenId','Required parameter tokenId was null or undefined when calling collectionsContractAddressTokensTokenIdTransactionsGet.');
            }
            const localVarPath = `/collections/{contractAddress}/tokens/{tokenId}/transactions`
                .replace(`{${"contractAddress"}}`, encodeURIComponent(String(contractAddress)))
                .replace(`{${"tokenId"}}`, encodeURIComponent(String(tokenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Order} [order] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsGet: async (order?: Order, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CollectionsApi - functional programming interface
 * @export
 */
export const CollectionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} contractAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsContractAddressGet(contractAddress: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Collection>>> {
            const localVarAxiosArgs = await CollectionsApiAxiosParamCreator(configuration).collectionsContractAddressGet(contractAddress, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} contractAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsContractAddressTokensGet(contractAddress: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Token>>>> {
            const localVarAxiosArgs = await CollectionsApiAxiosParamCreator(configuration).collectionsContractAddressTokensGet(contractAddress, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} contractAddress 
         * @param {string} tokenId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsContractAddressTokensTokenIdBidsGet(contractAddress: string, tokenId: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<TokenBid>>>> {
            const localVarAxiosArgs = await CollectionsApiAxiosParamCreator(configuration).collectionsContractAddressTokensTokenIdBidsGet(contractAddress, tokenId, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} contractAddress 
         * @param {string} tokenId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsContractAddressTokensTokenIdGet(contractAddress: string, tokenId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Token>>> {
            const localVarAxiosArgs = await CollectionsApiAxiosParamCreator(configuration).collectionsContractAddressTokensTokenIdGet(contractAddress, tokenId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} contractAddress 
         * @param {string} tokenId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsContractAddressTokensTokenIdTransactionsGet(contractAddress: string, tokenId: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<TokenTransaction>>>> {
            const localVarAxiosArgs = await CollectionsApiAxiosParamCreator(configuration).collectionsContractAddressTokensTokenIdTransactionsGet(contractAddress, tokenId, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Order} [order] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsGet(order?: Order, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Collection>>>> {
            const localVarAxiosArgs = await CollectionsApiAxiosParamCreator(configuration).collectionsGet(order, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CollectionsApi - factory interface
 * @export
 */
export const CollectionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} contractAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsContractAddressGet(contractAddress: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Collection>> {
            return CollectionsApiFp(configuration).collectionsContractAddressGet(contractAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} contractAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsContractAddressTokensGet(contractAddress: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Token>>> {
            return CollectionsApiFp(configuration).collectionsContractAddressTokensGet(contractAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} contractAddress 
         * @param {string} tokenId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsContractAddressTokensTokenIdBidsGet(contractAddress: string, tokenId: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<TokenBid>>> {
            return CollectionsApiFp(configuration).collectionsContractAddressTokensTokenIdBidsGet(contractAddress, tokenId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} contractAddress 
         * @param {string} tokenId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsContractAddressTokensTokenIdGet(contractAddress: string, tokenId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Token>> {
            return CollectionsApiFp(configuration).collectionsContractAddressTokensTokenIdGet(contractAddress, tokenId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} contractAddress 
         * @param {string} tokenId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsContractAddressTokensTokenIdTransactionsGet(contractAddress: string, tokenId: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<TokenTransaction>>> {
            return CollectionsApiFp(configuration).collectionsContractAddressTokensTokenIdTransactionsGet(contractAddress, tokenId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Order} [order] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsGet(order?: Order, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Collection>>> {
            return CollectionsApiFp(configuration).collectionsGet(order, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CollectionsApi - object-oriented interface
 * @export
 * @class CollectionsApi
 * @extends {BaseAPI}
 */
export class CollectionsApi extends BaseAPI {
    /**
     * 
     * @param {string} contractAddress 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public async collectionsContractAddressGet(contractAddress: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Collection>> {
        return CollectionsApiFp(this.configuration).collectionsContractAddressGet(contractAddress, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} contractAddress 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public async collectionsContractAddressTokensGet(contractAddress: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Token>>> {
        return CollectionsApiFp(this.configuration).collectionsContractAddressTokensGet(contractAddress, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} contractAddress 
     * @param {string} tokenId 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public async collectionsContractAddressTokensTokenIdBidsGet(contractAddress: string, tokenId: string, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<TokenBid>>> {
        return CollectionsApiFp(this.configuration).collectionsContractAddressTokensTokenIdBidsGet(contractAddress, tokenId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} contractAddress 
     * @param {string} tokenId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public async collectionsContractAddressTokensTokenIdGet(contractAddress: string, tokenId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Token>> {
        return CollectionsApiFp(this.configuration).collectionsContractAddressTokensTokenIdGet(contractAddress, tokenId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} contractAddress 
     * @param {string} tokenId 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public async collectionsContractAddressTokensTokenIdTransactionsGet(contractAddress: string, tokenId: string, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<TokenTransaction>>> {
        return CollectionsApiFp(this.configuration).collectionsContractAddressTokensTokenIdTransactionsGet(contractAddress, tokenId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Order} [order] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public async collectionsGet(order?: Order, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Collection>>> {
        return CollectionsApiFp(this.configuration).collectionsGet(order, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}

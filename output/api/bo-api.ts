/* tslint:disable */
/* eslint-disable */
/**
 * ErcWorld Marketplace
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BoBousersBody } from '../models';
import { BoBousersBody1 } from '../models';
import { BoBousersBody2 } from '../models';
import { BoUsersBody } from '../models';
import { BoUsersBody1 } from '../models';
import { BoUsersBody2 } from '../models';
import { BousersHistoryBody } from '../models';
import { BousersHistoryBody1 } from '../models';
import { BousersHistoryBody2 } from '../models';
import { ErcWorldUser } from '../models';
import { ErcWorldUserBo } from '../models';
import { IdNotesBody } from '../models';
import { IdNotesBody1 } from '../models';
import { IdNotesBody2 } from '../models';
import { UserHistory } from '../models';
import { UserNote } from '../models';
import { UserRole } from '../models';
/**
 * BoApi - axios parameter creator
 * @export
 */
export const BoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Roles: admin
         * @summary List Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boBorolesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bo/boroles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Roles: admin
         * @summary get all BO users History
         * @param {BousersHistoryBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boBousersHistoryPost: async (body?: BousersHistoryBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bo/bousers/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Roles: admin
         * @summary List Users
         * @param {BoBousersBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boBousersPost: async (body?: BoBousersBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bo/bousers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Roles: admin
         * @summary Get public User Profile
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boUsersIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling boUsersIdGet.');
            }
            const localVarPath = `/bo/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Roles: admin
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boUsersIdNotesGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling boUsersIdNotesGet.');
            }
            const localVarPath = `/bo/users/{id}/notes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Roles: admin
         * @param {number} id 
         * @param {number} noteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boUsersIdNotesNoteIdDelete: async (id: number, noteId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling boUsersIdNotesNoteIdDelete.');
            }
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling boUsersIdNotesNoteIdDelete.');
            }
            const localVarPath = `/bo/users/{id}/notes/{noteId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"noteId"}}`, encodeURIComponent(String(noteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Roles: admin
         * @param {number} id 
         * @param {IdNotesBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boUsersIdNotesPost: async (id: number, body?: IdNotesBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling boUsersIdNotesPost.');
            }
            const localVarPath = `/bo/users/{id}/notes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Roles: admin
         * @summary List Users
         * @param {BoUsersBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boUsersPost: async (body?: BoUsersBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bo/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BoApi - functional programming interface
 * @export
 */
export const BoApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Roles: admin
         * @summary List Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boBorolesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<UserRole>>>> {
            const localVarAxiosArgs = await BoApiAxiosParamCreator(configuration).boBorolesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Roles: admin
         * @summary get all BO users History
         * @param {BousersHistoryBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boBousersHistoryPost(body?: BousersHistoryBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<UserHistory>>>> {
            const localVarAxiosArgs = await BoApiAxiosParamCreator(configuration).boBousersHistoryPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Roles: admin
         * @summary List Users
         * @param {BoBousersBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boBousersPost(body?: BoBousersBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ErcWorldUserBo>>>> {
            const localVarAxiosArgs = await BoApiAxiosParamCreator(configuration).boBousersPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Roles: admin
         * @summary Get public User Profile
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boUsersIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ErcWorldUser>>> {
            const localVarAxiosArgs = await BoApiAxiosParamCreator(configuration).boUsersIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Roles: admin
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boUsersIdNotesGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<UserNote>>>> {
            const localVarAxiosArgs = await BoApiAxiosParamCreator(configuration).boUsersIdNotesGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Roles: admin
         * @param {number} id 
         * @param {number} noteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boUsersIdNotesNoteIdDelete(id: number, noteId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<UserNote>>>> {
            const localVarAxiosArgs = await BoApiAxiosParamCreator(configuration).boUsersIdNotesNoteIdDelete(id, noteId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Roles: admin
         * @param {number} id 
         * @param {IdNotesBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boUsersIdNotesPost(id: number, body?: IdNotesBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<UserNote>>>> {
            const localVarAxiosArgs = await BoApiAxiosParamCreator(configuration).boUsersIdNotesPost(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Roles: admin
         * @summary List Users
         * @param {BoUsersBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boUsersPost(body?: BoUsersBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ErcWorldUser>>>> {
            const localVarAxiosArgs = await BoApiAxiosParamCreator(configuration).boUsersPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BoApi - factory interface
 * @export
 */
export const BoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Roles: admin
         * @summary List Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boBorolesGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<UserRole>>> {
            return BoApiFp(configuration).boBorolesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Roles: admin
         * @summary get all BO users History
         * @param {BousersHistoryBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boBousersHistoryPost(body?: BousersHistoryBody, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<UserHistory>>> {
            return BoApiFp(configuration).boBousersHistoryPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Roles: admin
         * @summary List Users
         * @param {BoBousersBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boBousersPost(body?: BoBousersBody, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ErcWorldUserBo>>> {
            return BoApiFp(configuration).boBousersPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Roles: admin
         * @summary Get public User Profile
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boUsersIdGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ErcWorldUser>> {
            return BoApiFp(configuration).boUsersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Roles: admin
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boUsersIdNotesGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<UserNote>>> {
            return BoApiFp(configuration).boUsersIdNotesGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Roles: admin
         * @param {number} id 
         * @param {number} noteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boUsersIdNotesNoteIdDelete(id: number, noteId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<UserNote>>> {
            return BoApiFp(configuration).boUsersIdNotesNoteIdDelete(id, noteId, options).then((request) => request(axios, basePath));
        },
        /**
         * Roles: admin
         * @param {number} id 
         * @param {IdNotesBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boUsersIdNotesPost(id: number, body?: IdNotesBody, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<UserNote>>> {
            return BoApiFp(configuration).boUsersIdNotesPost(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Roles: admin
         * @summary List Users
         * @param {BoUsersBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boUsersPost(body?: BoUsersBody, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ErcWorldUser>>> {
            return BoApiFp(configuration).boUsersPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BoApi - object-oriented interface
 * @export
 * @class BoApi
 * @extends {BaseAPI}
 */
export class BoApi extends BaseAPI {
    /**
     * Roles: admin
     * @summary List Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoApi
     */
    public async boBorolesGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<UserRole>>> {
        return BoApiFp(this.configuration).boBorolesGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Roles: admin
     * @summary get all BO users History
     * @param {BousersHistoryBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoApi
     */
    public async boBousersHistoryPost(body?: BousersHistoryBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<UserHistory>>> {
        return BoApiFp(this.configuration).boBousersHistoryPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Roles: admin
     * @summary List Users
     * @param {BoBousersBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoApi
     */
    public async boBousersPost(body?: BoBousersBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ErcWorldUserBo>>> {
        return BoApiFp(this.configuration).boBousersPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Roles: admin
     * @summary Get public User Profile
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoApi
     */
    public async boUsersIdGet(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ErcWorldUser>> {
        return BoApiFp(this.configuration).boUsersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Roles: admin
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoApi
     */
    public async boUsersIdNotesGet(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<UserNote>>> {
        return BoApiFp(this.configuration).boUsersIdNotesGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Roles: admin
     * @param {number} id 
     * @param {number} noteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoApi
     */
    public async boUsersIdNotesNoteIdDelete(id: number, noteId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<UserNote>>> {
        return BoApiFp(this.configuration).boUsersIdNotesNoteIdDelete(id, noteId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Roles: admin
     * @param {number} id 
     * @param {IdNotesBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoApi
     */
    public async boUsersIdNotesPost(id: number, body?: IdNotesBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<UserNote>>> {
        return BoApiFp(this.configuration).boUsersIdNotesPost(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Roles: admin
     * @summary List Users
     * @param {BoUsersBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoApi
     */
    public async boUsersPost(body?: BoUsersBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ErcWorldUser>>> {
        return BoApiFp(this.configuration).boUsersPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}

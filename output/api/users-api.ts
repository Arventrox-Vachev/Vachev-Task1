/* tslint:disable */
/* eslint-disable */
/**
 * ErcWorld Marketplace
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Group } from '../models';
import { Order2 } from '../models';
import { Order3 } from '../models';
import { Order4 } from '../models';
import { Order5 } from '../models';
import { Order6 } from '../models';
import { Order7 } from '../models';
import { PublicUser } from '../models';
import { Token } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Roles: admin
         * @param {string} walletAddress 
         * @param {Order2} [order] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersWalletAddressFollowersGet: async (walletAddress: string, order?: Order2, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletAddress' is not null or undefined
            if (walletAddress === null || walletAddress === undefined) {
                throw new RequiredError('walletAddress','Required parameter walletAddress was null or undefined when calling usersWalletAddressFollowersGet.');
            }
            const localVarPath = `/users/{walletAddress}/followers`
                .replace(`{${"walletAddress"}}`, encodeURIComponent(String(walletAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Roles: admin
         * @param {string} walletAddress 
         * @param {Order3} [order] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersWalletAddressFollowingGet: async (walletAddress: string, order?: Order3, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletAddress' is not null or undefined
            if (walletAddress === null || walletAddress === undefined) {
                throw new RequiredError('walletAddress','Required parameter walletAddress was null or undefined when calling usersWalletAddressFollowingGet.');
            }
            const localVarPath = `/users/{walletAddress}/following`
                .replace(`{${"walletAddress"}}`, encodeURIComponent(String(walletAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Roles: admin
         * @summary Get public User Profile
         * @param {string} walletAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersWalletAddressGet: async (walletAddress: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletAddress' is not null or undefined
            if (walletAddress === null || walletAddress === undefined) {
                throw new RequiredError('walletAddress','Required parameter walletAddress was null or undefined when calling usersWalletAddressGet.');
            }
            const localVarPath = `/users/{walletAddress}`
                .replace(`{${"walletAddress"}}`, encodeURIComponent(String(walletAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Roles: admin
         * @param {string} walletAddress 
         * @param {Order4} [order] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersWalletAddressLikedGet: async (walletAddress: string, order?: Order4, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletAddress' is not null or undefined
            if (walletAddress === null || walletAddress === undefined) {
                throw new RequiredError('walletAddress','Required parameter walletAddress was null or undefined when calling usersWalletAddressLikedGet.');
            }
            const localVarPath = `/users/{walletAddress}/liked`
                .replace(`{${"walletAddress"}}`, encodeURIComponent(String(walletAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Roles: admin
         * @param {string} walletAddress 
         * @param {Order5} [order] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersWalletAddressLikesGet: async (walletAddress: string, order?: Order5, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletAddress' is not null or undefined
            if (walletAddress === null || walletAddress === undefined) {
                throw new RequiredError('walletAddress','Required parameter walletAddress was null or undefined when calling usersWalletAddressLikesGet.');
            }
            const localVarPath = `/users/{walletAddress}/likes`
                .replace(`{${"walletAddress"}}`, encodeURIComponent(String(walletAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} walletAddress 
         * @param {Order6} [order] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersWalletAddressTokensGet: async (walletAddress: string, order?: Order6, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletAddress' is not null or undefined
            if (walletAddress === null || walletAddress === undefined) {
                throw new RequiredError('walletAddress','Required parameter walletAddress was null or undefined when calling usersWalletAddressTokensGet.');
            }
            const localVarPath = `/users/{walletAddress}/tokens`
                .replace(`{${"walletAddress"}}`, encodeURIComponent(String(walletAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} walletAddress 
         * @param {Group} group 
         * @param {Order7} [order] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersWalletAddressTokensGroupGet: async (walletAddress: string, group: Group, order?: Order7, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletAddress' is not null or undefined
            if (walletAddress === null || walletAddress === undefined) {
                throw new RequiredError('walletAddress','Required parameter walletAddress was null or undefined when calling usersWalletAddressTokensGroupGet.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling usersWalletAddressTokensGroupGet.');
            }
            const localVarPath = `/users/{walletAddress}/tokens/{group}`
                .replace(`{${"walletAddress"}}`, encodeURIComponent(String(walletAddress)))
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Roles: admin
         * @param {string} walletAddress 
         * @param {Order2} [order] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersWalletAddressFollowersGet(walletAddress: string, order?: Order2, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<PublicUser>>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).usersWalletAddressFollowersGet(walletAddress, order, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Roles: admin
         * @param {string} walletAddress 
         * @param {Order3} [order] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersWalletAddressFollowingGet(walletAddress: string, order?: Order3, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<PublicUser>>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).usersWalletAddressFollowingGet(walletAddress, order, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Roles: admin
         * @summary Get public User Profile
         * @param {string} walletAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersWalletAddressGet(walletAddress: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PublicUser>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).usersWalletAddressGet(walletAddress, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Roles: admin
         * @param {string} walletAddress 
         * @param {Order4} [order] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersWalletAddressLikedGet(walletAddress: string, order?: Order4, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).usersWalletAddressLikedGet(walletAddress, order, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Roles: admin
         * @param {string} walletAddress 
         * @param {Order5} [order] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersWalletAddressLikesGet(walletAddress: string, order?: Order5, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).usersWalletAddressLikesGet(walletAddress, order, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} walletAddress 
         * @param {Order6} [order] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersWalletAddressTokensGet(walletAddress: string, order?: Order6, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Token>>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).usersWalletAddressTokensGet(walletAddress, order, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} walletAddress 
         * @param {Group} group 
         * @param {Order7} [order] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersWalletAddressTokensGroupGet(walletAddress: string, group: Group, order?: Order7, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Token>>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).usersWalletAddressTokensGroupGet(walletAddress, group, order, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Roles: admin
         * @param {string} walletAddress 
         * @param {Order2} [order] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersWalletAddressFollowersGet(walletAddress: string, order?: Order2, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PublicUser>>> {
            return UsersApiFp(configuration).usersWalletAddressFollowersGet(walletAddress, order, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Roles: admin
         * @param {string} walletAddress 
         * @param {Order3} [order] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersWalletAddressFollowingGet(walletAddress: string, order?: Order3, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PublicUser>>> {
            return UsersApiFp(configuration).usersWalletAddressFollowingGet(walletAddress, order, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Roles: admin
         * @summary Get public User Profile
         * @param {string} walletAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersWalletAddressGet(walletAddress: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PublicUser>> {
            return UsersApiFp(configuration).usersWalletAddressGet(walletAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * Roles: admin
         * @param {string} walletAddress 
         * @param {Order4} [order] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersWalletAddressLikedGet(walletAddress: string, order?: Order4, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<string>>> {
            return UsersApiFp(configuration).usersWalletAddressLikedGet(walletAddress, order, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Roles: admin
         * @param {string} walletAddress 
         * @param {Order5} [order] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersWalletAddressLikesGet(walletAddress: string, order?: Order5, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<string>>> {
            return UsersApiFp(configuration).usersWalletAddressLikesGet(walletAddress, order, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} walletAddress 
         * @param {Order6} [order] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersWalletAddressTokensGet(walletAddress: string, order?: Order6, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Token>>> {
            return UsersApiFp(configuration).usersWalletAddressTokensGet(walletAddress, order, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} walletAddress 
         * @param {Group} group 
         * @param {Order7} [order] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersWalletAddressTokensGroupGet(walletAddress: string, group: Group, order?: Order7, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Token>>> {
            return UsersApiFp(configuration).usersWalletAddressTokensGroupGet(walletAddress, group, order, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Roles: admin
     * @param {string} walletAddress 
     * @param {Order2} [order] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async usersWalletAddressFollowersGet(walletAddress: string, order?: Order2, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<PublicUser>>> {
        return UsersApiFp(this.configuration).usersWalletAddressFollowersGet(walletAddress, order, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Roles: admin
     * @param {string} walletAddress 
     * @param {Order3} [order] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async usersWalletAddressFollowingGet(walletAddress: string, order?: Order3, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<PublicUser>>> {
        return UsersApiFp(this.configuration).usersWalletAddressFollowingGet(walletAddress, order, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Roles: admin
     * @summary Get public User Profile
     * @param {string} walletAddress 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async usersWalletAddressGet(walletAddress: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<PublicUser>> {
        return UsersApiFp(this.configuration).usersWalletAddressGet(walletAddress, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Roles: admin
     * @param {string} walletAddress 
     * @param {Order4} [order] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async usersWalletAddressLikedGet(walletAddress: string, order?: Order4, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<string>>> {
        return UsersApiFp(this.configuration).usersWalletAddressLikedGet(walletAddress, order, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Roles: admin
     * @param {string} walletAddress 
     * @param {Order5} [order] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async usersWalletAddressLikesGet(walletAddress: string, order?: Order5, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<string>>> {
        return UsersApiFp(this.configuration).usersWalletAddressLikesGet(walletAddress, order, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} walletAddress 
     * @param {Order6} [order] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async usersWalletAddressTokensGet(walletAddress: string, order?: Order6, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Token>>> {
        return UsersApiFp(this.configuration).usersWalletAddressTokensGet(walletAddress, order, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} walletAddress 
     * @param {Group} group 
     * @param {Order7} [order] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async usersWalletAddressTokensGroupGet(walletAddress: string, group: Group, order?: Order7, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Token>>> {
        return UsersApiFp(this.configuration).usersWalletAddressTokensGroupGet(walletAddress, group, order, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}

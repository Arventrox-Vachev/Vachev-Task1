/* tslint:disable */
/* eslint-disable */
/**
 * ErcWorld Marketplace
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ErcWorldUserDttResponse } from '../models';
import { NftDttResponse } from '../models';
import { UserHistoryDttResponse } from '../models';
/**
 * BoDatatablesApi - axios parameter creator
 * @export
 */
export const BoDatatablesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Roles: admin
         * @param {number} [start] 
         * @param {number} [length] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boDttUsersGet: async (start?: number, length?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bo/dtt/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Roles: admin
         * @param {number} id 
         * @param {number} [start] 
         * @param {number} [length] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boDttUsersIdHistoryGet: async (id: number, start?: number, length?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling boDttUsersIdHistoryGet.');
            }
            const localVarPath = `/bo/dtt/users/{id}/history`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Roles: admin
         * @param {string} walletAddress 
         * @param {number} [start] 
         * @param {number} [length] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boDttUsersWalletAddressNftCreatedGet: async (walletAddress: string, start?: number, length?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletAddress' is not null or undefined
            if (walletAddress === null || walletAddress === undefined) {
                throw new RequiredError('walletAddress','Required parameter walletAddress was null or undefined when calling boDttUsersWalletAddressNftCreatedGet.');
            }
            const localVarPath = `/bo/dtt/users/{walletAddress}/nft/created`
                .replace(`{${"walletAddress"}}`, encodeURIComponent(String(walletAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Roles: admin
         * @param {string} walletAddress 
         * @param {number} [start] 
         * @param {number} [length] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boDttUsersWalletAddressNftListedGet: async (walletAddress: string, start?: number, length?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletAddress' is not null or undefined
            if (walletAddress === null || walletAddress === undefined) {
                throw new RequiredError('walletAddress','Required parameter walletAddress was null or undefined when calling boDttUsersWalletAddressNftListedGet.');
            }
            const localVarPath = `/bo/dtt/users/{walletAddress}/nft/listed`
                .replace(`{${"walletAddress"}}`, encodeURIComponent(String(walletAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Roles: admin
         * @param {string} walletAddress 
         * @param {number} [start] 
         * @param {number} [length] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boDttUsersWalletAddressNftTransactionsGet: async (walletAddress: string, start?: number, length?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletAddress' is not null or undefined
            if (walletAddress === null || walletAddress === undefined) {
                throw new RequiredError('walletAddress','Required parameter walletAddress was null or undefined when calling boDttUsersWalletAddressNftTransactionsGet.');
            }
            const localVarPath = `/bo/dtt/users/{walletAddress}/nft/transactions`
                .replace(`{${"walletAddress"}}`, encodeURIComponent(String(walletAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BoDatatablesApi - functional programming interface
 * @export
 */
export const BoDatatablesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Roles: admin
         * @param {number} [start] 
         * @param {number} [length] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boDttUsersGet(start?: number, length?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ErcWorldUserDttResponse>>> {
            const localVarAxiosArgs = await BoDatatablesApiAxiosParamCreator(configuration).boDttUsersGet(start, length, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Roles: admin
         * @param {number} id 
         * @param {number} [start] 
         * @param {number} [length] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boDttUsersIdHistoryGet(id: number, start?: number, length?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserHistoryDttResponse>>> {
            const localVarAxiosArgs = await BoDatatablesApiAxiosParamCreator(configuration).boDttUsersIdHistoryGet(id, start, length, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Roles: admin
         * @param {string} walletAddress 
         * @param {number} [start] 
         * @param {number} [length] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boDttUsersWalletAddressNftCreatedGet(walletAddress: string, start?: number, length?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<NftDttResponse>>> {
            const localVarAxiosArgs = await BoDatatablesApiAxiosParamCreator(configuration).boDttUsersWalletAddressNftCreatedGet(walletAddress, start, length, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Roles: admin
         * @param {string} walletAddress 
         * @param {number} [start] 
         * @param {number} [length] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boDttUsersWalletAddressNftListedGet(walletAddress: string, start?: number, length?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<NftDttResponse>>> {
            const localVarAxiosArgs = await BoDatatablesApiAxiosParamCreator(configuration).boDttUsersWalletAddressNftListedGet(walletAddress, start, length, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Roles: admin
         * @param {string} walletAddress 
         * @param {number} [start] 
         * @param {number} [length] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boDttUsersWalletAddressNftTransactionsGet(walletAddress: string, start?: number, length?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<NftDttResponse>>> {
            const localVarAxiosArgs = await BoDatatablesApiAxiosParamCreator(configuration).boDttUsersWalletAddressNftTransactionsGet(walletAddress, start, length, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BoDatatablesApi - factory interface
 * @export
 */
export const BoDatatablesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Roles: admin
         * @param {number} [start] 
         * @param {number} [length] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boDttUsersGet(start?: number, length?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ErcWorldUserDttResponse>> {
            return BoDatatablesApiFp(configuration).boDttUsersGet(start, length, options).then((request) => request(axios, basePath));
        },
        /**
         * Roles: admin
         * @param {number} id 
         * @param {number} [start] 
         * @param {number} [length] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boDttUsersIdHistoryGet(id: number, start?: number, length?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<UserHistoryDttResponse>> {
            return BoDatatablesApiFp(configuration).boDttUsersIdHistoryGet(id, start, length, options).then((request) => request(axios, basePath));
        },
        /**
         * Roles: admin
         * @param {string} walletAddress 
         * @param {number} [start] 
         * @param {number} [length] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boDttUsersWalletAddressNftCreatedGet(walletAddress: string, start?: number, length?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<NftDttResponse>> {
            return BoDatatablesApiFp(configuration).boDttUsersWalletAddressNftCreatedGet(walletAddress, start, length, options).then((request) => request(axios, basePath));
        },
        /**
         * Roles: admin
         * @param {string} walletAddress 
         * @param {number} [start] 
         * @param {number} [length] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boDttUsersWalletAddressNftListedGet(walletAddress: string, start?: number, length?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<NftDttResponse>> {
            return BoDatatablesApiFp(configuration).boDttUsersWalletAddressNftListedGet(walletAddress, start, length, options).then((request) => request(axios, basePath));
        },
        /**
         * Roles: admin
         * @param {string} walletAddress 
         * @param {number} [start] 
         * @param {number} [length] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boDttUsersWalletAddressNftTransactionsGet(walletAddress: string, start?: number, length?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<NftDttResponse>> {
            return BoDatatablesApiFp(configuration).boDttUsersWalletAddressNftTransactionsGet(walletAddress, start, length, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BoDatatablesApi - object-oriented interface
 * @export
 * @class BoDatatablesApi
 * @extends {BaseAPI}
 */
export class BoDatatablesApi extends BaseAPI {
    /**
     * Roles: admin
     * @param {number} [start] 
     * @param {number} [length] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoDatatablesApi
     */
    public async boDttUsersGet(start?: number, length?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ErcWorldUserDttResponse>> {
        return BoDatatablesApiFp(this.configuration).boDttUsersGet(start, length, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Roles: admin
     * @param {number} id 
     * @param {number} [start] 
     * @param {number} [length] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoDatatablesApi
     */
    public async boDttUsersIdHistoryGet(id: number, start?: number, length?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserHistoryDttResponse>> {
        return BoDatatablesApiFp(this.configuration).boDttUsersIdHistoryGet(id, start, length, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Roles: admin
     * @param {string} walletAddress 
     * @param {number} [start] 
     * @param {number} [length] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoDatatablesApi
     */
    public async boDttUsersWalletAddressNftCreatedGet(walletAddress: string, start?: number, length?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<NftDttResponse>> {
        return BoDatatablesApiFp(this.configuration).boDttUsersWalletAddressNftCreatedGet(walletAddress, start, length, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Roles: admin
     * @param {string} walletAddress 
     * @param {number} [start] 
     * @param {number} [length] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoDatatablesApi
     */
    public async boDttUsersWalletAddressNftListedGet(walletAddress: string, start?: number, length?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<NftDttResponse>> {
        return BoDatatablesApiFp(this.configuration).boDttUsersWalletAddressNftListedGet(walletAddress, start, length, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Roles: admin
     * @param {string} walletAddress 
     * @param {number} [start] 
     * @param {number} [length] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoDatatablesApi
     */
    public async boDttUsersWalletAddressNftTransactionsGet(walletAddress: string, start?: number, length?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<NftDttResponse>> {
        return BoDatatablesApiFp(this.configuration).boDttUsersWalletAddressNftTransactionsGet(walletAddress, start, length, options).then((request) => request(this.axios, this.basePath));
    }
}

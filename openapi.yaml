openapi: 3.0.1
info:
  title: ErcWorld Marketplace
  version: v1
paths:
  /bo/users:
    post:
      tags:
        - Bo
      summary: List Users
      description: "Roles: admin"
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UsersSearchRequest"
              description: ""
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UsersSearchRequest"
              description: ""
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UsersSearchRequest"
              description: ""
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErcWorldUser"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErcWorldUser"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErcWorldUser"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /bo/users/{id}:
    get:
      tags:
        - Bo
      summary: Get public User Profile
      description: "Roles: admin"
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Get public user profile successfully
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ErcWorldUser"
            application/json:
              schema:
                $ref: "#/components/schemas/ErcWorldUser"
            text/json:
              schema:
                $ref: "#/components/schemas/ErcWorldUser"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: When auth fails
        "422":
          description: When Input validation fails
        "500":
          description: When unhandled error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /bo/users/{id}/notes:
    get:
      tags:
        - Bo
      summary: ""
      description: "Roles: admin"
      parameters:
        - name: id
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserNote"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserNote"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserNote"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - Bo
      summary: ""
      description: "Roles: admin"
      parameters:
        - name: id
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UsersNoteRequest"
              description: ""
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UsersNoteRequest"
              description: ""
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UsersNoteRequest"
              description: ""
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserNote"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserNote"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserNote"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /bo/users/{id}/notes/{noteId}:
    delete:
      tags:
        - Bo
      summary: ""
      description: "Roles: admin"
      parameters:
        - name: id
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: integer
            format: int32
        - name: noteId
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserNote"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserNote"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserNote"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /bo/bousers:
    post:
      tags:
        - Bo
      summary: List Users
      description: "Roles: admin"
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UsersSearchRequest"
              description: ""
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UsersSearchRequest"
              description: ""
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UsersSearchRequest"
              description: ""
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErcWorldUserBo"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErcWorldUserBo"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErcWorldUserBo"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /bo/bousers/history:
    post:
      tags:
        - Bo
      summary: get all BO users History
      description: "Roles: admin"
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UsersHistoryRequest"
              description: ""
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UsersHistoryRequest"
              description: ""
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UsersHistoryRequest"
              description: ""
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserHistory"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserHistory"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserHistory"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /bo/boroles:
    get:
      tags:
        - Bo
      summary: List Roles
      description: "Roles: admin"
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserRole"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserRole"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserRole"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /bo/dtt/users:
    get:
      tags:
        - BoDatatables
      summary: ""
      description: "Roles: admin"
      parameters:
        - name: start
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
        - name: length
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ErcWorldUserDttResponse"
            application/json:
              schema:
                $ref: "#/components/schemas/ErcWorldUserDttResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/ErcWorldUserDttResponse"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /bo/dtt/users/{id}/history:
    get:
      tags:
        - BoDatatables
      summary: ""
      description: "Roles: admin"
      parameters:
        - name: id
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
        - name: length
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/UserHistoryDttResponse"
            application/json:
              schema:
                $ref: "#/components/schemas/UserHistoryDttResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/UserHistoryDttResponse"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /bo/dtt/users/{walletAddress}/nft/created:
    get:
      tags:
        - BoDatatables
      summary: ""
      description: "Roles: admin"
      parameters:
        - name: walletAddress
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
        - name: start
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
        - name: length
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/NftDttResponse"
            application/json:
              schema:
                $ref: "#/components/schemas/NftDttResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/NftDttResponse"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /bo/dtt/users/{walletAddress}/nft/listed:
    get:
      tags:
        - BoDatatables
      summary: ""
      description: "Roles: admin"
      parameters:
        - name: walletAddress
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
        - name: start
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
        - name: length
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/NftDttResponse"
            application/json:
              schema:
                $ref: "#/components/schemas/NftDttResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/NftDttResponse"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /bo/dtt/users/{walletAddress}/nft/transactions:
    get:
      tags:
        - BoDatatables
      summary: ""
      description: "Roles: admin"
      parameters:
        - name: walletAddress
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
        - name: start
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
        - name: length
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/NftDttResponse"
            application/json:
              schema:
                $ref: "#/components/schemas/NftDttResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/NftDttResponse"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/bo/me:
    get:
      tags:
        - BoUser
      summary: Get User Profile
      description: "Roles: admin"
      responses:
        "200":
          description: Update user profile successfully
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ErcWorldUserBo"
            application/json:
              schema:
                $ref: "#/components/schemas/ErcWorldUserBo"
            text/json:
              schema:
                $ref: "#/components/schemas/ErcWorldUserBo"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: When auth fails
        "422":
          description: When Input validation fails
        "500":
          description: When unhandled error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/bo/{userId}:
    get:
      tags:
        - BoUser
      summary: Get User Profile
      description: "Roles: admin"
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Update user profile successfully
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ErcWorldUserBo"
            application/json:
              schema:
                $ref: "#/components/schemas/ErcWorldUserBo"
            text/json:
              schema:
                $ref: "#/components/schemas/ErcWorldUserBo"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: When auth fails
        "422":
          description: When Input validation fails
        "500":
          description: When unhandled error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/bo:
    put:
      tags:
        - BoUser
      summary: Set User Profile
      description: "Roles: admin"
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ErcWorldUserBo"
              description: ""
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ErcWorldUserBo"
              description: ""
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ErcWorldUserBo"
              description: ""
      responses:
        "200":
          description: Update user profile successfully
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ErcWorldUserBo"
            application/json:
              schema:
                $ref: "#/components/schemas/ErcWorldUserBo"
            text/json:
              schema:
                $ref: "#/components/schemas/ErcWorldUserBo"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: When auth fails
        "422":
          description: When Input validation fails
        "500":
          description: When unhandled error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /collections:
    get:
      tags:
        - Collections
      summary: ""
      parameters:
        - name: order
          in: query
          description: ""
          style: form
          schema:
            allOf:
              - $ref: "#/components/schemas/CollectionsOrder"
            description: List Type
        - name: limit
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Collection"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Collection"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Collection"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /collections/{contractAddress}:
    get:
      tags:
        - Collections
      summary: ""
      parameters:
        - name: contractAddress
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Collection"
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
            text/json:
              schema:
                $ref: "#/components/schemas/Collection"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /collections/{contractAddress}/tokens:
    get:
      tags:
        - Collections
      summary: ""
      parameters:
        - name: contractAddress
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Token"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Token"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Token"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /collections/{contractAddress}/tokens/{tokenId}:
    get:
      tags:
        - Collections
      summary: ""
      parameters:
        - name: contractAddress
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
        - name: tokenId
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Token"
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
            text/json:
              schema:
                $ref: "#/components/schemas/Token"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /collections/{contractAddress}/tokens/{tokenId}/transactions:
    get:
      tags:
        - Collections
      summary: ""
      parameters:
        - name: limit
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
        - name: contractAddress
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: tokenId
          in: path
          required: true
          style: simple
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TokenTransaction"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TokenTransaction"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TokenTransaction"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /collections/{contractAddress}/tokens/{tokenId}/bids:
    get:
      tags:
        - Collections
      summary: ""
      parameters:
        - name: limit
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
        - name: contractAddress
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: tokenId
          in: path
          required: true
          style: simple
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TokenBid"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TokenBid"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TokenBid"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /files/upload:
    post:
      tags:
        - Files
      summary: Update user profile endpoint
      description: "Roles: admin"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: File
                  format: binary
            encoding:
              content:
                style: form
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/FileUploadResponse"
            application/json:
              schema:
                $ref: "#/components/schemas/FileUploadResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/FileUploadResponse"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "422":
          description: Client Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /tokens:
    get:
      tags:
        - Tokens
      summary: ""
      parameters:
        - name: order
          in: query
          description: ""
          style: form
          schema:
            allOf:
              - $ref: "#/components/schemas/CollectionsOrder"
            description: List Type
        - name: limit
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Token"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Token"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Token"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /tokens/{tokenId}:
    get:
      tags:
        - Tokens
      summary: ""
      parameters:
        - name: tokenId
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Token"
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
            text/json:
              schema:
                $ref: "#/components/schemas/Token"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/me:
    get:
      tags:
        - User
      summary: Get User Profile
      description: "Roles: admin"
      responses:
        "200":
          description: Update user profile successfully
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ErcWorldUser"
            application/json:
              schema:
                $ref: "#/components/schemas/ErcWorldUser"
            text/json:
              schema:
                $ref: "#/components/schemas/ErcWorldUser"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: When auth fails
        "422":
          description: When Input validation fails
        "500":
          description: When unhandled error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - User
      summary: Update user profile endpoint
      description: "Roles: admin"
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UserRequest"
              description: ""
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UserRequest"
              description: ""
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UserRequest"
              description: ""
      responses:
        "200":
          description: Update user profile successfully
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ErcWorldUser"
            application/json:
              schema:
                $ref: "#/components/schemas/ErcWorldUser"
            text/json:
              schema:
                $ref: "#/components/schemas/ErcWorldUser"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: When auth fails
        "403":
          description: When permission error
        "409":
          description: When creation fails
        "422":
          description: When Input validation fails
        "500":
          description: When unhandled error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/me/uploaduserimages:
    put:
      tags:
        - User
      summary: Update user profile images endpoint
      description: "Roles: admin"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                Wallet:
                  type: string
                  description: User Wallet
                avatarImgFile:
                  type: string
                  format: binary
                coverImgFile:
                  type: string
                  format: binary
            encoding:
              Wallet:
                style: form
              avatarImgFile:
                style: form
              coverImgFile:
                style: form
      responses:
        "200":
          description: Update user profile successfully
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ErcWorldUser"
            application/json:
              schema:
                $ref: "#/components/schemas/ErcWorldUser"
            text/json:
              schema:
                $ref: "#/components/schemas/ErcWorldUser"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: When auth fails
        "403":
          description: When permission error
        "409":
          description: When creation fails
        "422":
          description: When Input validation fails
        "500":
          description: When unhandled error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/me/follow/{walletAddress}:
    put:
      tags:
        - User
      summary: Update user profile endpoint
      description: "Roles: admin"
      parameters:
        - name: walletAddress
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
      responses:
        "200":
          description: Success
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - User
      summary: Update user profile endpoint
      description: "Roles: admin"
      parameters:
        - name: walletAddress
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
      responses:
        "200":
          description: Success
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/me/like/{walletAddress}:
    put:
      tags:
        - User
      summary: Add like
      description: "Roles: admin"
      parameters:
        - name: walletAddress
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
      responses:
        "200":
          description: Success
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - User
      summary: Dislike Wallet
      description: "Roles: admin"
      parameters:
        - name: walletAddress
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
      responses:
        "200":
          description: Success
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/me/favorite/{contractAddress}/{tokenId}:
    put:
      tags:
        - User
      summary: ""
      description: "Roles: admin"
      parameters:
        - name: contractAddress
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
        - name: tokenId
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - User
      summary: ""
      description: "Roles: admin"
      parameters:
        - name: contractAddress
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
        - name: tokenId
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{walletAddress}:
    get:
      tags:
        - Users
      summary: Get public User Profile
      description: "Roles: admin"
      parameters:
        - name: walletAddress
          in: path
          required: true
          style: simple
          schema:
            type: string
      responses:
        "200":
          description: Get public user profile successfully
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/PublicUser"
            application/json:
              schema:
                $ref: "#/components/schemas/PublicUser"
            text/json:
              schema:
                $ref: "#/components/schemas/PublicUser"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: When auth fails
        "422":
          description: When Input validation fails
        "500":
          description: When unhandled error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{walletAddress}/followers:
    get:
      tags:
        - Users
      summary: ""
      description: "Roles: admin"
      parameters:
        - name: walletAddress
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
        - name: order
          in: query
          description: ""
          style: form
          schema:
            allOf:
              - $ref: "#/components/schemas/Order"
            description: List Type
        - name: limit
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PublicUser"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PublicUser"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PublicUser"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{walletAddress}/following:
    get:
      tags:
        - Users
      summary: ""
      description: "Roles: admin"
      parameters:
        - name: walletAddress
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
        - name: order
          in: query
          description: ""
          style: form
          schema:
            allOf:
              - $ref: "#/components/schemas/Order"
            description: List Type
        - name: limit
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PublicUser"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PublicUser"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PublicUser"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{walletAddress}/liked:
    get:
      tags:
        - Users
      summary: ""
      description: "Roles: admin"
      parameters:
        - name: walletAddress
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
        - name: order
          in: query
          description: ""
          style: form
          schema:
            allOf:
              - $ref: "#/components/schemas/Order"
            description: List Type
        - name: limit
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{walletAddress}/likes:
    get:
      tags:
        - Users
      summary: ""
      description: "Roles: admin"
      parameters:
        - name: walletAddress
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
        - name: order
          in: query
          description: ""
          style: form
          schema:
            allOf:
              - $ref: "#/components/schemas/Order"
            description: List Type
        - name: limit
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{walletAddress}/tokens:
    get:
      tags:
        - Users
      summary: ""
      parameters:
        - name: walletAddress
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
        - name: order
          in: query
          description: ""
          style: form
          schema:
            allOf:
              - $ref: "#/components/schemas/CollectionsOrder"
            description: List Type
        - name: limit
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Token"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Token"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Token"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{walletAddress}/tokens/{group}:
    get:
      tags:
        - Users
      summary: ""
      parameters:
        - name: walletAddress
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
        - name: group
          in: path
          description: ""
          required: true
          style: simple
          schema:
            allOf:
              - $ref: "#/components/schemas/TokenGroup"
            description: Token Group
        - name: order
          in: query
          description: ""
          style: form
          schema:
            allOf:
              - $ref: "#/components/schemas/CollectionsOrder"
            description: List Type
        - name: limit
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: ""
          style: form
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Token"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Token"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Token"
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Auction:
      type: object
      properties:
        id:
          type: integer
          description: ""
          format: int64
        startTime:
          type: string
          description: ""
          format: date-time
        endTime:
          type: string
          description: ""
          format: date-time
        seller:
          allOf:
            - $ref: "#/components/schemas/TokenUser"
          description: ""
          nullable: true
        price:
          allOf:
            - $ref: "#/components/schemas/AuctionPrice"
          description: Token Price
          nullable: true
      additionalProperties: false
      description: ""
    AuctionPrice:
      type: object
      properties:
        minOffer:
          allOf:
            - $ref: "#/components/schemas/CurrencyValue"
          description: ""
          nullable: true
        buyNow:
          allOf:
            - $ref: "#/components/schemas/CurrencyValue"
          description: ""
          nullable: true
      additionalProperties: false
      description: Price
    Collection:
      type: object
      properties:
        name:
          type: string
          description: Collection Name
        contractAddress:
          type: string
          description: Address
        img:
          type: string
          description: Image Url
        standard:
          allOf:
            - $ref: "#/components/schemas/NftStandard"
          description: NFT Standard
          nullable: true
        currency:
          allOf:
            - $ref: "#/components/schemas/Currency"
          description: NFT Standard
          nullable: true
        floorPrice:
          allOf:
            - $ref: "#/components/schemas/CurrencyValue"
          description: Floor Price
          nullable: true
        volume:
          allOf:
            - $ref: "#/components/schemas/CurrencyValue"
          description: Volume
          nullable: true
      additionalProperties: false
      description: ""
    CollectionsOrder:
      enum:
        - trending
        - recentlyListed
        - ascending
        - descending
      type: string
      description: List Type
    Currency:
      enum:
        - eth
        - sol
      type: string
      description: Nft Standard
    CurrencyValue:
      type: object
      properties:
        currency:
          allOf:
            - $ref: "#/components/schemas/Currency"
          description: The message
        value:
          type: number
          description: Value
          format: double
        usdValue:
          type: number
          description: Value
          format: double
          nullable: true
      additionalProperties: false
      description: Price
    ErcWorldUser:
      type: object
      properties:
        id:
          type: integer
          description: User Internal ID
          format: int64
        username:
          type: string
          description: User Internal Name
          nullable: true
        wallet:
          type: string
          description: User Wallet
        bio:
          type: string
          description: User Bio under the avatarImg in User profile page
          nullable: true
        coverSrc:
          type: string
          description: Background image of the user profile
          nullable: true
        avatarSrc:
          type: string
          description: Avatar image of the user profile
          nullable: true
        followers:
          type: integer
          description: User followers
          format: int32
        following:
          type: integer
          description: User following
          format: int32
        createDate:
          type: string
          description: ""
          format: date-time
        likes:
          type: integer
          description: User followers
          format: int32
        liked:
          type: integer
          description: User following
          format: int32
        email:
          type: string
          description: User Email
          nullable: true
        messengers:
          type: array
          items:
            $ref: "#/components/schemas/UserMessenger"
          description: Messengers settings
          nullable: true
        settings:
          allOf:
            - $ref: "#/components/schemas/UserSetting"
          description: Notification and authentication settings
          nullable: true
      additionalProperties: false
      description: ""
    ErcWorldUserBo:
      type: object
      properties:
        id:
          type: integer
          description: User Internal ID
          format: int64
        username:
          type: string
          description: User Internal Name
          nullable: true
        password:
          type: string
          description: User Pass
          nullable: true
        wallet:
          type: string
          description: User Wallet
        fullname:
          type: string
          description: User Bio under the avatarImg in User profile page
          nullable: true
        email:
          type: string
          description: Background image of the user profile
          nullable: true
        pic:
          type: string
          description: Avatar image of the user profile
          nullable: true
        roles:
          type: array
          items:
            type: string
          description: Avatar image of the user profile
          nullable: true
        permissions:
          type: array
          items:
            type: string
          description: Avatar image of the user profile
          nullable: true
        status:
          type: integer
          description: Avatar image of the user profile
          format: int32
          nullable: true
        occupation:
          type: string
          description: User Wallet
          nullable: true
      additionalProperties: false
      description: ""
    ErcWorldUserDttResponse:
      type: object
      properties:
        recordsTotal:
          type: integer
          description: Total
          format: int32
        recordsFiltered:
          type: integer
          description: Filtered
          format: int32
        data:
          type: array
          items:
            $ref: "#/components/schemas/ErcWorldUser"
          description: Data
          nullable: true
      additionalProperties: false
      description: ""
    Error:
      type: object
      properties:
        message:
          type: string
          description: The message
        errors:
          type: array
          items:
            type: string
          description: Validation Errors
          nullable: true
      additionalProperties: false
      description: System Error
    FileUploadResponse:
      type: object
      properties:
        Name:
          type: string
          description: File Name
        Hash:
          type: string
          description: File Hash
        Size:
          type: string
          description: File Hash
      additionalProperties: false
      description: ""
    Nft:
      type: object
      properties:
        type:
          type: string
          description: ""
          nullable: true
        eventid:
          type: integer
          description: ""
          format: int64
        parentcontractaddress:
          type: string
          description: ""
          nullable: true
        calleraddress:
          type: string
          description: ""
          nullable: true
        creatoraddress:
          type: string
          description: ""
          nullable: true
        tokenid:
          type: integer
          description: ""
          format: int64
        royaltyfee:
          type: number
          description: ""
          format: double
        supply:
          type: integer
          description: ""
          format: int64
        uri:
          type: string
          description: ""
          nullable: true
        createdate:
          type: string
          description: ""
          format: date-time
        eventtimestamp_unix:
          type: integer
          description: ""
          format: int64
        eventtimestamp:
          type: string
          description: ""
          format: date-time
      additionalProperties: false
      description: >-
        '721' as "type", eventid, parentcontractaddress, calleraddress,
        creatoraddress, tokenid, royaltyfee, 0 supply, uri, createdate,
        eventtimestamp_unix, eventtimestamp
    NftDttResponse:
      type: object
      properties:
        recordsTotal:
          type: integer
          description: Total
          format: int32
        recordsFiltered:
          type: integer
          description: Filtered
          format: int32
        data:
          type: array
          items:
            $ref: "#/components/schemas/Nft"
          description: Data
          nullable: true
      additionalProperties: false
      description: ""
    NftStandard:
      enum:
        - erc721
        - erc1155
      type: string
      description: Nft Standard
    Order:
      enum:
        - ascending
        - descending
      type: string
      description: List Type
    PublicUser:
      type: object
      properties:
        id:
          type: integer
          description: User Internal ID
          format: int64
        username:
          type: string
          description: User Internal Name
          nullable: true
        wallet:
          type: string
          description: User Wallet
          nullable: true
        userbio:
          type: string
          description: User Bio under the avatarImg in User profile page
          nullable: true
        coverImg:
          type: string
          description: Background image of the user profile
          nullable: true
        avatarImg:
          type: string
          description: Avatar image of the user profile
          nullable: true
        followers:
          type: integer
          description: User followers
          format: int32
        following:
          type: integer
          description: User following
          format: int32
        liked:
          type: integer
          description: User liked
          format: int32
        likes:
          type: integer
          description: User likes
          format: int32
      additionalProperties: false
      description: ""
    Token:
      type: object
      properties:
        id:
          type: string
          description: Token Name
        name:
          type: string
          description: Token Name
        standard:
          allOf:
            - $ref: "#/components/schemas/NftStandard"
          description: NFT Standard
          nullable: true
        description:
          type: string
          description: Token Description
          nullable: true
        favoriteCount:
          type: integer
          description: Favorite Count
          format: int32
        creator:
          allOf:
            - $ref: "#/components/schemas/TokenUser"
          description: ""
          nullable: true
        collection:
          allOf:
            - $ref: "#/components/schemas/Collection"
          description: ""
          nullable: true
        royalty:
          type: number
          description: ""
          format: double
        availability:
          allOf:
            - $ref: "#/components/schemas/TokenAvailability"
          description: ""
          nullable: true
        auction:
          allOf:
            - $ref: "#/components/schemas/Auction"
          description: ""
          nullable: true
        price:
          allOf:
            - $ref: "#/components/schemas/CurrencyValue"
          description: Token Price
          nullable: true
        sale:
          allOf:
            - $ref: "#/components/schemas/TokenSale"
          description: Token Sell Methods
          nullable: true
      additionalProperties: false
    TokenAvailability:
      type: object
      properties:
        total:
          type: number
          description: Total
          format: double
        current:
          type: number
          description: Current
          format: double
      additionalProperties: false
      description: ""
    TokenBid:
      type: object
      properties:
        from:
          allOf:
            - $ref: "#/components/schemas/TokenUser"
          description: Token Seller
        timestamp:
          type: integer
          description: Token Seller
          format: int64
        price:
          allOf:
            - $ref: "#/components/schemas/CurrencyValue"
          description: Token Seller
          nullable: true
      additionalProperties: false
      description: ""
    TokenGroup:
      enum:
        - auction
        - transferred
        - purchases
        - favorites
        - created
      type: string
      description: Token Group
    TokenSale:
      type: object
      properties:
        seller:
          allOf:
            - $ref: "#/components/schemas/TokenUser"
          description: Token Seller
        price:
          allOf:
            - $ref: "#/components/schemas/CurrencyValue"
          description: Token Seller
          nullable: true
      additionalProperties: false
      description: ""
    TokenTransaction:
      type: object
      properties:
        from:
          allOf:
            - $ref: "#/components/schemas/TokenUser"
          description: Token Seller
        to:
          allOf:
            - $ref: "#/components/schemas/TokenUser"
          description: Token Seller
        timestamp:
          type: integer
          description: Token Seller
          format: int64
        price:
          allOf:
            - $ref: "#/components/schemas/CurrencyValue"
          description: Token Seller
          nullable: true
      additionalProperties: false
      description: ""
    TokenUser:
      type: object
      properties:
        name:
          type: string
          description: Creator Name
        wallet:
          type: string
          description: Wallet
          nullable: true
        avatar:
          type: string
          description: Avatar Url
          nullable: true
      additionalProperties: false
      description: ""
    UserHistory:
      type: object
      properties:
        users_id:
          type: integer
          description: ""
          format: int64
        useragent:
          type: string
          description: ""
        ip:
          type: string
          description: ""
        createdate:
          type: string
          description: ""
          format: date-time
        os:
          type: string
          description: ""
          nullable: true
        client:
          type: string
          description: ""
          nullable: true
        device:
          type: string
          description: ""
          nullable: true
        brand:
          type: string
          description: ""
          nullable: true
        model:
          type: string
          description: ""
          nullable: true
        bot:
          type: string
          description: ""
          nullable: true
      additionalProperties: false
      description: ""
    UserHistoryDttResponse:
      type: object
      properties:
        recordsTotal:
          type: integer
          description: Total
          format: int32
        recordsFiltered:
          type: integer
          description: Filtered
          format: int32
        data:
          type: array
          items:
            $ref: "#/components/schemas/UserHistory"
          description: Data
          nullable: true
      additionalProperties: false
      description: ""
    UserMessenger:
      type: object
      properties:
        name:
          type: string
          description: Messenger Name
        connected:
          type: boolean
          description: Messenger Connected or not
      additionalProperties: false
    UserNote:
      type: object
      properties:
        id:
          type: integer
          description: User Internal ID
          format: int64
        note:
          type: string
          description: User Internal Name
          nullable: true
        createdate:
          type: string
          description: ""
          format: date-time
        createuser:
          type: string
          description: ""
      additionalProperties: false
      description: ""
    UserNotification:
      type: object
      properties:
        name:
          type: string
          description: Notification Name
        email:
          type: boolean
          description: Email notification enabled
        push:
          type: boolean
          description: Push notification enabled
      additionalProperties: false
    UserRequest:
      type: object
      properties:
        username:
          type: string
          description: User Internal Name
          nullable: true
        wallet:
          type: string
          description: User Wallet
          nullable: true
        bio:
          type: string
          description: User Bio under the avatarImg in User profile page
          nullable: true
        email:
          type: string
          description: User Email
          nullable: true
        messengers:
          type: array
          items:
            $ref: "#/components/schemas/UserMessenger"
          description: Messengers settings
          nullable: true
        settings:
          allOf:
            - $ref: "#/components/schemas/UserSetting"
          description: Notification and authentication settings
          nullable: true
      additionalProperties: false
      description: ""
    UserRole:
      type: object
      properties:
        id:
          type: integer
          description: User Wallet
          format: int64
        title:
          type: string
          description: User Wallet
          nullable: true
        description:
          type: string
          description: User Wallet
          nullable: true
      additionalProperties: false
      description: ""
    UserSetting:
      type: object
      properties:
        twoFactorEnabled:
          type: boolean
          description: Two factor authentication enabled
          nullable: true
        antiPhishingEnabled:
          type: boolean
          description: Two factor authentication enabled
          nullable: true
        notifications:
          type: array
          items:
            $ref: "#/components/schemas/UserNotification"
          description: Notifications settings
          nullable: true
      additionalProperties: false
    UsersHistoryRequest:
      type: object
      properties:
        id:
          type: integer
          description: User Id
          format: int64
        count:
          type: integer
          description: Number of rows
          format: int32
      additionalProperties: false
      description: ""
    UsersNoteRequest:
      type: object
      properties:
        note:
          type: string
          description: User Wallet
      additionalProperties: false
      description: ""
    UsersSearchRequest:
      type: object
      properties:
        searchTerm:
          type: string
          description: User Wallet
      additionalProperties: false
      description: ""
  securitySchemes:
    Bearer:
      type: http
      description: Please enter a valid token
      scheme: Bearer
      bearerFormat: JWT
security:
  - Bearer: []
